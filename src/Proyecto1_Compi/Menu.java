package Proyecto1_Compi;

import Error.Error_;
import Error.LinkedListError;
import Estructuras.ArbolBinario;
import Estructuras.ListaSimple;
import analizadores.Lector;
import analizadores.Parser;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Squery
 */
public class Menu extends javax.swing.JFrame {

    /**
     * Creates new form Menu
     */
    private String nombreArchivo = "";
    public static ArrayList<ArbolBinario> arboles = new ArrayList<>();
    public static ArrayList<String[]> comentarios = new ArrayList();
    public static ArrayList<String[]> conjuntos = new ArrayList();
    public static ArrayList<String[]> cadenas = new ArrayList();
    public static LinkedListError listaErr = new LinkedListError();
    public static int contadorGrafosArboles = 0;

    public Menu() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanelPrincipal = new javax.swing.JPanel();
        Archivo = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton3 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ExpAnalyzer");
        setLocation(new java.awt.Point(400, 100));
        setResizable(false);

        PanelPrincipal.setBackground(new java.awt.Color(102, 102, 102));

        Archivo.setBackground(new java.awt.Color(255, 255, 255));
        Archivo.setForeground(new java.awt.Color(0, 0, 0));
        Archivo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nuevo archivo", "Abrir archivo", "Guardar archivo", "Guardar como...", "Generar XML de salida" }));
        Archivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionesArchivos(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Archivo de entrada");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton3.setText("Generar autómatas");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton1.setText("Analizar entradas");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Salida");

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setForeground(new java.awt.Color(0, 0, 0));
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jButton2.setText("Siguiente");

        jButton4.setText("Anterior");

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Imagen");

        jComboBox1.setBackground(new java.awt.Color(255, 255, 255));
        jComboBox1.setForeground(new java.awt.Color(0, 0, 0));
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Arboles", "Siguientes", "Transiciones", "Autómatas" }));

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Nombre");

        javax.swing.GroupLayout PanelPrincipalLayout = new javax.swing.GroupLayout(PanelPrincipal);
        PanelPrincipal.setLayout(PanelPrincipalLayout);
        PanelPrincipalLayout.setHorizontalGroup(
            PanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelPrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelPrincipalLayout.createSequentialGroup()
                        .addGroup(PanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Archivo, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(PanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1)
                                .addGroup(PanelPrincipalLayout.createSequentialGroup()
                                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(106, 106, 106)
                        .addGroup(PanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelPrincipalLayout.createSequentialGroup()
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(243, 243, 243)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(13, 13, 13))
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        PanelPrincipalLayout.setVerticalGroup(
            PanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelPrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Archivo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(PanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PanelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PanelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void opcionesArchivos(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionesArchivos
        JFileChooser fc = new JFileChooser();
        if ("Nuevo archivo".equals(Archivo.getSelectedItem())) {

        } else if ("Abrir archivo".equals(Archivo.getSelectedItem())) {
            comentarios.clear();
            cadenas.clear();
            conjuntos.clear();
            arboles.clear();
            listaErr.clear();
            abrirArchivo(fc); //Método para abrir y obtener el contenido de un archivo
        } else if ("Guardar archivo".equals(Archivo.getSelectedItem())) {
            String contenido = jTextArea1.getText(); //Obtenemos el contenido del textArea1
            crearTexto(contenido);                   //Se lo guardamos al archivo actual
        } else if ("Guardar como...".equals(Archivo.getSelectedItem())) {
            jTextArea2.setText("Archivo guardado con exito");
        } else if ("Generar XML de salida".equals(Archivo.getSelectedItem())) {
            jTextArea2.setText("Archivo generado con exito");
        }
    }//GEN-LAST:event_opcionesArchivos

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        crearCarpetas();
        if ("".equals(nombreArchivo)) { //Si el nombre que guarda del archivo es vacío significa que no ha seleccionado ningun archivo
            String texto = jTextArea1.getText();
            if (!"".equals(texto)) {
                analizar(texto);
            }
        }
        if (listaErr.isEmpty()) { //Si la lista de errores está vacía significa que el archivo de entrada no tuvo ningún error
            for (ArbolBinario i : arboles) {
                i.inicio();
            }
        } else {

            ReporteErrores();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String cadenasEvaluadas = "";

        for (ArbolBinario arbol : arboles) {
            for (String[] cadena : cadenas) {
                if (cadena[0].equals(arbol.getNombre())) {
                    if (arbol.evaluarCadena(cadena[1])) {
                        cadenasEvaluadas += "La cadena: " + cadena[1] + " si cumple";
                    } else {
                        cadenasEvaluadas += "La cadena: " + cadena[1] + " no cumple";
                    }
                }
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void ReporteErrores() {
        String cadenaErrores = "<!DOCTYPE html>\n"
                + "<html lang=\"en\">\n"
                + "<head>\n"
                + "<meta charset=\"UTF-8\">\n"
                + "<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n"
                + "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n"
                + "<title>Errores</title>\n"
                + "</head>\n"
                + "<body>\n"
                + "\n"
                + "\n"
                + "<TABLE border=\"1\" style=\"margin: 0 auto; font-size: large;\">\n"
                + "<TR>\n"
                + "<TD>\n"
                + "#\n"
                + "</TD>\n"
                + "<TD>\n"
                + "Tipo de error\n"
                + "</TD>\n"
                + "<TD>\n"
                + "Descripción\n"
                + "</TD>\n"
                + "<TD>\n"
                + "Linea \n"
                + "</TD>\n"
                + "<TD>\n"
                + "Columna\n"
                + "</TD>\n"
                + "</TR>\n";
        int contadorErrores = 1;
        for (Error_ error_ : listaErr) {
            cadenaErrores += "<TR>\n";
            cadenaErrores += "<TD>" + String.valueOf(contadorErrores) + "</TD>\n";
            cadenaErrores += "<TD>" + error_.getTipo() + "</TD>\n";
            cadenaErrores += "<TD>" + error_.getMensaje() + "</TD>\n";
            cadenaErrores += "<TD>" + error_.getFila() + "</TD>\n";
            cadenaErrores += "<TD>" + error_.getColumna() + "</TD>\n";
            cadenaErrores += "</TR>\n";
            contadorErrores++;
        }
        cadenaErrores += ""
                + "</TABLE>\n"
                + "\n"
                + "\n"
                + "</body>\n"
                + "</html>";

        try {
            String ruta = "Reportes/Errores_201901429/Errores" + String.valueOf(contadorGrafosArboles) + ".html";

            File file = new File(ruta);
            // Si el archivo no existe es creado
            if (!file.exists()) {
                file.createNewFile();
            }
            FileWriter fw = new FileWriter(file);
            BufferedWriter bw = new BufferedWriter(fw);
            bw.write(cadenaErrores);
            bw.close();
        } catch (Exception e) {
            System.out.println("Error");
            e.printStackTrace();
        }

    }

    private void crearCarpetas() {
        File arboles = new File("Reportes/Arboles_201901429");
        if (!arboles.exists()) {
            if (arboles.mkdirs()) {
                System.out.println("Directorio creado");
            }
        }

        File siguiente = new File("Reportes/Siguientes_201901429");
        if (!siguiente.exists()) {
            if (siguiente.mkdirs()) {
                System.out.println("Directorio creado");
            }
        }

        File transiciones = new File("Reportes/Transiciones_201901429");
        if (!transiciones.exists()) {
            if (transiciones.mkdirs()) {
                System.out.println("Directorio creado");
            }
        }

        File AFD = new File("Reportes/AFD_201901429");
        if (!AFD.exists()) {
            if (AFD.mkdirs()) {
                System.out.println("Directorio creado");
            }
        }

        File Errores = new File("Reportes/Errores_201901429");
        if (!Errores.exists()) {
            if (Errores.mkdirs()) {
                System.out.println("Directorio creado");
            }
        }
        File salidas = new File("Reportes/Salidas_201901429");
        if (!salidas.exists()) {
            if (salidas.mkdirs()) {
                System.out.println("Directorio creado");
            }
        }

    }

    private String leerArchivo(String rutaArchivo) throws IOException {
        String textoFinal = "";
        BufferedReader br = null;
        try {
            br = new BufferedReader(new FileReader(rutaArchivo));
            String linea;
            while ((linea = br.readLine()) != null) {
                textoFinal += linea + "\n";
            }
        } catch (IOException e) {
            System.out.println(e);
        } finally {
            if (br != null) {
                br.close();
            }
        }
        return textoFinal;
    }

    private void abrirArchivo(JFileChooser fc) {
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos exp", "exp"); //Para que se puedan seleccionar solo archivos con cierta extensión.
        fc.setFileFilter(filter); //Agregamos el filtro al filechooser
        int respuesta = fc.showOpenDialog(this);
        if (respuesta == JFileChooser.APPROVE_OPTION) { //Comprobar si se ha pulsado Aceptar
            File archivoElegido = fc.getSelectedFile(); //Crear un objeto File con el archivo elegido
            try {
                String ruta = archivoElegido.toString();//Obtenemos la ruta y la parseamos a String
                nombreArchivo = ruta;                   //Guardamos la ruta en la variable global nombreArchivo para utilizarla en otros casos
                String texto = leerArchivo(ruta);       //Obtenemos el texto del archivo
                System.out.println(texto);
                jTextArea1.setText(texto);              //Lo seteamos en el textArea 1
                analizar(texto);                        //Lo mandamos a analizar con jFlex y Cup

                //System.out.println("\u001B[31m" + "\n\nComentarios: " + "\u001B[0m");
                //elementos.mostrar();
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, e);                  //En caso de haber un error lo mostramos
            }
        } else {
            JOptionPane.showMessageDialog(null, "No se seleccionó ningún archivo. ");
        }
    }

    public void crearTexto(String texto) {
        FileWriter flwriter = null;
        try {
            flwriter = new FileWriter(nombreArchivo);
            BufferedWriter bfwriter = new BufferedWriter(flwriter);
            bfwriter.write(texto);
            bfwriter.close();
            JOptionPane.showMessageDialog(null, "Archivo guardado satisfactoriamente!");
        } catch (IOException e) {
            System.out.println("Error al intentar escribir en el archivo " + e);
        } finally {
            if (flwriter != null) {
                try {
                    flwriter.close();
                } catch (IOException e) {
                    System.out.println("Error al cerrar el flujo principal del archivo...");
                }
            }
        }
    }

    private void analizar(String text) {
        try {
            Lector scanner = new Lector(new BufferedReader(new StringReader(text)));
            Parser parser = new Parser(scanner);
            parser.parse();
        } catch (Exception e) {
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Menu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Archivo;
    private javax.swing.JPanel PanelPrincipal;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
}
